{
  "hash": "d931df63fa7fc3b2aba330d81efc44dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating clustered bar graphs with R base graphics\"\ndescription: \"A tutorial on creating clustered bar graphs using base R.\"\ndate: 2025-04-18\ncategories: [Data Visualization, R]\ntags: [barplots, R]\n---\n\n\n\nA clustered bar graph is useful for comparing values across two categories of data. In this type of graph, we organize the bars in groups based on the levels of the first categorical variable. The height of each bar within a group represents the value of a level of the second categorical variable.\n\nYou can create this graph in R using the pre-installed base graphics package. This package has many plotting functions that are easy to use and excel at generating basic plots quickly. Use the command `library(help = “graphics”)` to get more information on this package, including a complete list of its functions.\n\n## **Pre-requisities**\n\nTo follow through with the activities in this article, you should have a working knowledge of R.\n\n## The Data\n\n\n\n```{=html}\n<table>\n  <thead>\n    <tr>\n      <th>Store</th>\n      <th>Product</th>\n      <th>Sales ($)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>A</td>\n      <td>P1</td>\n      <td>42,500</td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>P1</td>\n      <td>48,502</td>\n    </tr>\n    <tr>\n      <td>C</td>\n      <td>P1</td>\n      <td>39,500</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>P2</td>\n      <td>43,600</td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>P2</td>\n      <td>32,303</td>\n    </tr>\n    <tr>\n      <td>C</td>\n      <td>P2</td>\n      <td>29,500</td>\n    </tr>\n    <tr>\n      <td>A</td>\n      <td>P3</td>\n      <td>49,270</td>\n    </tr>\n    <tr>\n      <td>B</td>\n      <td>P3</td>\n      <td>49,664</td>\n    </tr>\n    <tr>\n      <td>C</td>\n      <td>P3</td>\n      <td>48,507</td>\n    </tr>\n  </tbody>\n</table>\n<p style=\"font-weight: bold; text-indent: 30px;\">Table 1: Dummy sales data.</p> \n```\n\n\nTo create the graphs in this article, we use the dataset displayed in Table 1. In this dataset, Store and Product are categorical variables, while Sales is a numerical variable. You can use a clustered bar graph to compare the monthly sales of the three products across the three stores. The bars in this graph will be organized into three groups based on store levels, with each bar representing the sales figure for a specific product.\n\n## How to create the graph\n\n### Step 1: Reorganize the dataset\n\nWe use the `barplot()` function in the base graphics package to plot the clustered bar graph. However, we must reorganize the dataset into a wide format to use this function effectively. In this format, each unique product occupies a single row, and each cell corresponds to a sales figure. Currently, the dataset has a long format, with store and product values spread across multiple rows.\n\nThe `barplot()` function requires the dataset to be in vector or matrix form. In this exercise, we input the data as a matrix using the `matrix()` function.\n\nHere is the code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- matrix(c(42500, 48502, 39500, 43600, 32303, 29500, 49270, 49664, 48507), nrow = 3, byrow = TRUE)\nrownames(mydata) <- c(\"P1\", \"P2\", \"P3\")\ncolnames(mydata) <- c(\"A\", \"B\", \"C\")\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       A     B     C\nP1 42500 48502 39500\nP2 43600 32303 29500\nP3 49270 49664 48507\n```\n\n\n:::\n:::\n\n\n\nThe `matrix()` function has two crucial arguments, `nrow` and `byrow`. `nrow` specifies the number of rows in the matrix, while `byrow`, set to `TRUE`, indicates that the matrix is populated row by row.\n\n### Step 2: Create the graph\n\nThe code provided below uses the `barplot()` function to create the graph shown in @fig-1.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(mydata, beside = TRUE, xlab = \"Store\", ylab = \"Sales ($)\", legend.text = TRUE)\n```\n\n::: {.cell-output-display}\n![Clustered bar graph created using barplot().](clustered-barplots-r_files/figure-html/fig-1-1.png){#fig-1 width=672}\n:::\n:::\n\n\n\nAs demonstrated in the code, `barplot()` accepts several arguments. Use the command `?barplot` to obtain a complete list of the function’s arguments.\n\nThe argument `beside` must be set to `TRUE` to ensure the bars within groups appear side-by-side, creating the desired clustered bar graph. If set to `FALSE`, the bars will appear stacked on each other. Additionally, we use the `xlab` and `ylab` arguments to specify the labels for the graph’s x-axis and y-axis, respectively.\n\nBy setting the argument `legendtext` to `TRUE`, we create a legend for the graph. A legend is a crucial element of a clustered bar graph because it helps users associate bar colors with distinct data points.\n\n### Step 3: Customize the graph\n\nThe graph in @fig-1 is a basic clustered bar graph with few elements. We can enhance the graph’s clarity by adding colors, customizing the legend, adjusting the margins, and rescaling the y-axis.\n\n#### 1. Add colors\n\nWe use the `Pastel1` palette from the `RColorBrewer` package to color the bars of the graph based on product levels.\n\nIf you don’t already have this package installed, do so with the command `install.packages(\"RColorBrewer\")`.\n\nAfter installation, use the command `library(RColorBrewer)` to load the package.\n\nOnce loaded, you can access the `brewer.pal()` function and use it to create a vector of colors for your graph. This function takes two arguments: the number of colors and the name of the color palette. For a complete list of the palettes in `Rcolorbrewer`, use the command `display.brewer.all()`.\n\nWe use the following code to add colors and create the graph shown in @fig-2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nbarplot(mydata, beside = TRUE, col = brewer.pal(3, name = \"Pastel1\"), xlab = \"Store\", ylab = \"Sales ($)\", legend.text = TRUE)\n```\n\n::: {.cell-output-display}\n![Clustered bar graph with added product colors.](clustered-barplots-r_files/figure-html/fig-2-1.png){#fig-2 width=672}\n:::\n:::\n\n\n\n#### 2. Customize the legend\n\nWe can enhance the legend of the graph in @fig-2 by\n\n-   Repositioning it to avoid blocking the bars.\n\n-   Removing the box around it.\n\n-   Adding a title.\n\nFor these adjustments, we pass the following arguments to `args.legend()` as a list:\n\n-   title = \"Product\": sets the title of the legend.\n\n-   x = \"right\": positions the legend to the right of the graph.\n\n-   bty = \"n\": suppresses the box around the legend, reducing clutter.\n\n-   inset = c(-0.16): shifts the legend 0.16 units to the right.\n\nThe adjustments result in the graph shown in @fig-3.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(mydata, beside = TRUE, col = brewer.pal(3, name = \"Pastel1\"), xlab = \"Store\", ylab = \"Sales ($)\", legend.text = TRUE, args.legend = list(title = \"Product\", x = \"right\", bty = \"n\", inset = -0.16))\n```\n\n::: {.cell-output-display}\n![Clustered bar graph with customized legend.](clustered-barplots-r_files/figure-html/fig-3-1.png){#fig-3 width=672}\n:::\n:::\n\n\n\n#### 3. Adjust the margins\n\n@fig-3 shows that the right margin lacks sufficient space for the legend. To resolve this problem, we increase the size of the right margin using the `par()` function with the `mai` argument, specifying the margin in inches. Use the command `par(\"mai\")` to check the plot’s default margin settings.\n\nAdditionally, we can use the `space` argument to reduce the space between the groups of bars, thus creating more room in the right margin. This argument accepts two values. The first value indicates the space between bars within a group, while the second value denotes the space between groups of bars. These changes result in the graph in @fig-4.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mai=c(1, 1, 1, 1.2))\nbarplot(mydata, beside = TRUE, col = brewer.pal(3, name = \"Pastel1\"), space = c(0, 0.6), xlab = \"Store\", ylab = \"Sales ($)\", legend.text = TRUE, args.legend = list(title = \"Product\", x = \"right\", bty = \"n\", inset = -0.16))\n```\n\n::: {.cell-output-display}\n![Clustered bar graph with adjusted margins.](clustered-barplots-r_files/figure-html/fig-4-1.png){#fig-4 width=672}\n:::\n:::\n\n\n\n#### 4. Rescale the y-axis\n\nWe use the `ylim` argument to specify the range of the y-axis. This argument accepts a vector containing the smallest and largest values on the y-axis. Here is the code used to create the graph shown in @fig-5.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mai=c(1, 1, 1, 1.2))\nbarplot(mydata, beside = TRUE, col = brewer.pal(3, name = \"Pastel1\"), space = c(0, 0.6), xlab = \"Store\", ylab = \"Sales ($)\", ylim = c(0, 60000), legend.text = TRUE, args.legend = list(title = \"Product\", x = \"right\", bty = \"n\", inset = -0.16))\n```\n\n::: {.cell-output-display}\n![Clustered bar graph with various modifications.](clustered-barplots-r_files/figure-html/fig-5-1.png){#fig-5 width=672}\n:::\n:::\n\n\n\n## Conclusion\n\nThis article has shown that you can create a visually appealing and effective clustered bar graph using the `barplot()` function from R’s base graphics package. The function has several arguments that allow you to customize the graph’s appearance to meet your needs. While graphing, remember that simplicity and clarity are crucial to effectively communicating your data to viewers.\n",
    "supporting": [
      "clustered-barplots-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}